version: '3.8'

services:
  # Production PostgreSQL with persistent storage
  postgres:
    image: ankane/pgvector:latest
    platform: linux/amd64
    environment:
      POSTGRES_DB: books
      POSTGRES_USER: books
      POSTGRES_PASSWORD: books
    volumes:
      - ./sql:/docker-entrypoint-initdb.d
      - pgdata_prod:/var/lib/postgresql/data
    networks:
      - book-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U books"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    platform: linux/amd64
    volumes:
      - redis_data:/data
    networks:
      - book-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ZooKeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    platform: linux/amd64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,stat"
    networks:
      - book-network
    restart: unless-stopped
    healthcheck:
      test: echo "ruok" | nc -w 2 localhost 2181 | grep imok
      interval: 10s
      timeout: 5s
      retries: 3

  # Production Kafka
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    platform: linux/amd64
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - book-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-ec", "/usr/bin/kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  # Core services
  ingestion_service:
    build:
      context: .
      dockerfile: src/ingestion_service/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    volumes:
      - ./data:/app/data
    networks:
      - book-network
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  recommendation_api:
    build:
      context: .
      dockerfile: src/recommendation_api/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    volumes:
      - ./data:/app/data
    ports:
      - "8000:8000"
    networks:
      - book-network
    depends_on:
      ingestion_service:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped

  streamlit_ui:
    build:
      context: .
      dockerfile: src/streamlit_ui/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    volumes:
      - ./data:/app/data
    ports:
      - "8501:8501"
    networks:
      - book-network
    depends_on:
      - recommendation_api
    restart: unless-stopped

  # Background workers
  book_enrichment_worker:
    build:
      context: .
      dockerfile: src/book_enrichment_worker/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    volumes:
      - ./data:/app/data
    networks:
      - book-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  graph_refresher:
    build:
      context: .
      dockerfile: src/graph_refresher/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    volumes:
      - ./data:/app/data
    networks:
      - book-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # Incremental workers
  book_vector_worker:
    build:
      context: .
      dockerfile: src/incremental_workers/book_vector/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    volumes:
      - ./data:/app/data
    networks:
      - book-network
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  student_embedding_worker:
    build:
      context: .
      dockerfile: src/incremental_workers/student_embedding/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    networks:
      - book-network
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  similarity_worker:
    build:
      context: .
      dockerfile: src/incremental_workers/similarity/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    networks:
      - book-network
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  student_profile_worker:
    build:
      context: .
      dockerfile: src/incremental_workers/student_profile/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    networks:
      - book-network
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # Observability
  log_consumer:
    build:
      context: .
      dockerfile: src/log_consumer/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    volumes:
      - ./logs:/app/logs
    networks:
      - book-network
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  metrics_consumer:
    build:
      context: .
      dockerfile: src/metrics_consumer/Dockerfile
    platform: linux/amd64
    env_file: .env.prod
    networks:
      - book-network
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # NGINX reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
    networks:
      - book-network
    depends_on:
      - streamlit_ui
      - recommendation_api
    restart: unless-stopped

volumes:
  pgdata_prod:
  redis_data:

networks:
  book-network:
    driver: bridge 